# -*- coding: utf-8 -*-
"""tpSDS.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kPSLBbM8c6Z-hMXHJz63IvdeI6hbaUlu
"""

import numpy as np
import math
import scipy.stats as sp
import matplotlib.pyplot as plt
import random

n, p, t, m, s = 100, 0.4, 40.0, 40, np.sqrt(24)

def binom_dis(n, x, p):return math.comb(n, x) * (p**x) * ((1-p)**(n-x))
def Pois_dis(x, t, k):return np.exp(-t*k)*(np.power(k*t, x)/math.factorial(x))
def Exp_dis(x, t):return t*np.exp(-t * x)
def norm_dis(x, m, s):return ((1/(s*np.sqrt(2*np.pi)))*np.exp(-((x-m)**2)/(2*s**2)))
def sample(typeDis, sizeS):
  x_values_dis = [random.randint(0, sizeS) for i in range(sizeS)]
  x_values_con = [random.random() for i in range(sizeS)]
  if typeDis == "bin" :return x_values_dis, [binom_dis(n, x, p) for x in x_values_dis]
  if typeDis == "pos" :return x_values_dis, [Pois_dis(x, t, 1) for x in x_values_dis]
  if typeDis == "exp" :return x_values_con, [Exp_dis(x, t) for x in x_values_con]
  if typeDis == "nor" :return x_values_con, [norm_dis(x, m, s) for x in x_values_con]

"""# **Binomial Distribution**"""

x_values = np.arange(0, n+1)
custom_pmf = [binom_dis(n, x, p) for x in x_values]
scipy_pmf = sp.binom.pmf(x_values, n, p)

plt.figure(figsize=(8, 5))
plt.subplot(1,2,1);plt.bar(x_values, custom_pmf, alpha=0.5, label='Custom PMF', color = "red")
plt.subplot(1,2,2);plt.bar(x_values, scipy_pmf, alpha=0.5, label='Scipy PMF')
plt.title('Comparison of Custom PMF and Scipy PMF for Binomial Distribution')
plt.xlabel('Number of Successes')
plt.ylabel('Probability')
plt.legend()
plt.show()

sample50 = sample("bin", 50)
sample100 = sample("bin", 100)
sample1000 = sample("bin", 1000)
plt.figure(figsize=(16, 6))
plt.subplot(1,3,1);plt.bar(sample50[0], sample50[1], alpha=0.5)
plt.subplot(1,3,2);plt.bar(sample100[0], sample100[1], alpha=0.5)
plt.subplot(1,3,3);plt.bar(sample1000[0], sample1000[1], alpha=0.5)
plt.title('Comparison of 50, 100 and 1000 for Binomial Distribution')
plt.xlabel('Number of Successes')
plt.ylabel('Probability')
plt.legend()
plt.show()

"""# **Poisson Distribution**"""

t_values = np.arange(0, 10)
custom_pmf = [Pois_dis(x, t, 1) for x in t_values]
scipy_pmf = sp.poisson.pmf(t_values, t)

plt.figure(figsize=(8, 5))
plt.subplot(1,2,2);plt.bar(t_values, custom_pmf, alpha=0.5, label='Custom PMF' ,color = "red")
plt.subplot(1,2,1);plt.bar(t_values, scipy_pmf, alpha=0.5, label='Scipy PMF')
plt.title('Comparison of Custom PMF and Scipy PMF for Poisson Distribution')
plt.xlabel('Number of Events')
plt.ylabel('Probability')
plt.legend()
plt.show()

sample50 = sample("pos", 50)
sample100 = sample("pos", 100)
# sample1000 = sample("pos", 1000)
plt.figure(figsize=(16, 6))
plt.subplot(1,3,1);plt.bar(sample50[0], sample50[1], alpha=0.5)
plt.subplot(1,3,2);plt.bar(sample100[0], sample100[1], alpha=0.5)
# plt.subplot(1,3,3);plt.bar(sample1000[0], sample1000[1], alpha=0.5)
plt.title('Comparison of 50, 100 and 1000 for Poisson Distribution')
plt.xlabel('Number of Successes')
plt.ylabel('Probability')
plt.legend()
plt.show()

"""# **Exponential Distribution**"""

x_values = np.linspace(0, 5, 100)
custom_pdf = [Exp_dis(x, t) for x in x_values]
scipy_pdf = sp.expon.pdf(x_values, scale=1/t)

plt.figure(figsize=(8, 5))
plt.subplot(1,2,2);plt.plot(x_values, custom_pdf, label='Custom PDF', color='blue')
plt.subplot(1,2,1);plt.plot(x_values, scipy_pdf, label='Scipy PDF', color='orange')
plt.title('Comparison of Custom PDF and Scipy PDF for Exponential Distribution')
plt.xlabel('Random Variable (x)')
plt.ylabel('Probability Density')
plt.legend()
plt.show()

sample50 = sample("exp", 50)
sample100 = sample("exp", 100)
sample1000 = sample("exp", 1000)
plt.figure(figsize=(16, 6))
plt.subplot(1,3,1);plt.plot(sample50[0], sample50[1], alpha=0.5)
plt.subplot(1,3,2);plt.plot(sample100[0], sample100[1], alpha=0.5)
plt.subplot(1,3,3);plt.plot(sample1000[0], sample1000[1], alpha=0.5)
plt.title('Comparison of 50, 100 and 1000 for Exponential Distribution')
plt.xlabel('Number of Successes')
plt.ylabel('Probability')
plt.legend()
plt.show()

"""## **Normal Distribution**"""

x_values = np.linspace(0, 20, 100)
custom_pdf = [norm_dis(x, m, s) for x in x_values]
scipy_pdf = sp.norm.pdf(x_values, loc=m, scale= s)

plt.figure(figsize=(8, 5))
plt.subplot(1,2,2);plt.plot(x_values, custom_pdf, label='Custom PDF', color='blue')
plt.subplot(1,2,1);plt.plot(x_values, scipy_pdf, label='Scipy PDF', color='orange')
plt.title('Comparison of Custom PDF and Scipy PDF for Normal Distribution')
plt.xlabel('Random Variable (x)')
plt.ylabel('Probability Density')
plt.legend()
plt.show()

sample50 = sample("nor", 50)
sample100 = sample("nor", 100)
sample1000 = sample("nor", 1000)
plt.figure(figsize=(16, 6))
plt.subplot(1,3,1);plt.plot(sample50[0], sample50[1], alpha=0.5)
plt.subplot(1,3,2);plt.plot(sample100[0], sample100[1], alpha=0.5)
plt.subplot(1,3,3);plt.plot(sample1000[0], sample1000[1], alpha=0.5)
plt.title('Comparison of 50, 100 and 1000 for Normal Distribution')
plt.xlabel('Number of Successes')
plt.ylabel('Probability')
plt.legend()
plt.show()

"""# **Approximate the Binomial distribution by the Poisson and the Gaussian**

# **Poisson distribution Approximate**
"""

def apprPos(n, p):return n*p
custom_pmf = [Pois_dis(x, t, 1) for x in t_values]
custom2_pmf = [Pois_dis(x, apprPos(n, p), 1) for x in t_values]
plt.figure(figsize=(10, 6))
plt.subplot(1,2,1);plt.bar(t_values, custom_pmf, alpha=0.5, label='Custom PMF')
plt.subplot(1,2,2);plt.bar(t_values, custom2_pmf, alpha=0.5, label='Custom2 PMF' ,color = "red")
plt.title('Comparison of Custom PMF and Custom 2 PMF for Poisson Distribution')
plt.xlabel('Number of Events')
plt.ylabel('Probability')
plt.legend()
plt.show()

"""# **Gaussian distribution Approximate**"""

def apprNor(n, p):return n*p, np.sqrt(n*p*(1-p))
custom_pdf = [norm_dis(x, m, s) for x in x_values]
custom2_pdf = [norm_dis(x, apprNor(n, p)[0], apprNor(n, p)[1]) for x in x_values]

plt.figure(figsize=(8, 5))
plt.subplot(1,2,1);plt.plot(x_values, custom_pdf, label='Custom PDF', color='orange')
plt.subplot(1,2,2);plt.plot(x_values, custom2_pdf, label='Custom 2 PDF', color='blue')
plt.title('Comparison of Custom PDF and Custom 2 PDF for Normal Distribution')
plt.xlabel('Random Variable (x)')
plt.ylabel('Probability Density')
plt.legend()
plt.show()